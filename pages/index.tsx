import type { NextPage } from 'next'
import { useState, useCallback, useEffect, useRef } from 'react'
import useWebSocket, { ReadyState } from 'react-use-websocket';
import ContentEditable from 'react-contenteditable'
import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'

interface Message {
    sender: string;
    content: string;
}

interface User {
    name: string,
    status: string
}

const Home: NextPage = () => {

    const messagesEndRef = useRef<null | HTMLDivElement>(null)

    const [typedText, setTypedText] = useState<string>('')
    const [messages, setMessages] = useState<Array<Message>>([])
    const [users, setUsers] = useState<Array<User>>([])
    const [username, setUsername] = useState<string>('User')
    const [emojiWindow, setEmojiWindow] = useState<boolean>(false)

    const serverWSAddress = process.env.NEXT_PUBLIC_SERVER_WS_ADDRESS ?? '';
    const [socketUrl, setSocketUrl] = useState(serverWSAddress)

    const { sendMessage, lastMessage, readyState } = useWebSocket(socketUrl)

    const handleClickSendMessage = () => {
        if (typedText === '') return
        sendMessage(typedText)
        setTypedText('')
    }

    const typedTextChanged = (event: any) => {
        if (event.target.value.includes('<div><br></div>')) {
            sendMessage(typedText)
            setTypedText('')
        } else {
            setTypedText(event.target.value)
        }
    }

    const scrollToBottom = () => {
        messagesEndRef.current?.scrollIntoView({ behavior: "smooth" })
    }

    const emojiWindowOnFocus = () => {
        setEmojiWindow(true)
    }

    const emojiWindowOnBlur = () => {
        setTimeout(() => {
            setEmojiWindow(false)
        },1)
    }

    const emojis = [":)", ":D", ";)", ":O", ":P", "(H)", ":@", ":S", ":$", ":(", ":'(", ":|", "(A)", "8o|", "8-|", "+o(", "<:o)", "|-)", "*-)", ":-#",
                    ":-*", "^o)", "8-)", "<3", "</3", "(M)", "(@)", "(&)", "(sn)", "(bah)", "(S)", "(*)", "(#)", "(R)", "({)", "(})", "(K)", "(F)", "(W)", "(O)"]

    const addEmoji = (index: number) => {
        setTypedText(`${typedText}<img src="/emojis/${index+1}.png" width="25" height="25" />`)
    }

    const replaceEmojis = () => {
        emojis.forEach((emoji, index) => {
            if (typedText.includes(emoji)) {
                setTypedText(typedText.replace(emoji, `<img src="/emojis/${index+1}.png" width="25" height="25" />`));
            }
        });
    }

    useEffect(() => {
        if (lastMessage && lastMessage.data) {
            let message = JSON.parse(lastMessage.data)
            switch(message.type) {
                case 'users':
                    setUsers(message.users);
                    break;
                case 'messages':
                    if (message.messages.length === 0) return
                    setMessages(messages.concat(message.messages))
            }
        }
    }, [lastMessage])

    useEffect(() => {
        scrollToBottom()
    }, [messages])

    useEffect(() => {
        replaceEmojis()
    }, [typedText])

    const connectionStatus = {
        [ReadyState.CONNECTING]: 'Connecting',
        [ReadyState.OPEN]: 'Open',
        [ReadyState.CLOSING]: 'Closing',
        [ReadyState.CLOSED]: 'Closed',
        [ReadyState.UNINSTANTIATED]: 'Uninstantiated',
    }[readyState];

    return (
        <div className={styles.container}>
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <main className={styles.main}>

                <div className={styles.chat_container}>
                    <div className={styles.topbar}>
                        <img width="30" height="25" src="/msn-logo.png" />
                        <div className={styles.users}>
                            {users.map((user, index) => {
                                return <div className={styles.user} key={index}><img width="15" height="20" src="/online.png" /><span className={styles.username}>{user.name}</span></div>
                            })}
                        </div>
                    </div>
                    <div className={styles.chat}>
                    {messages.map((message, index) => {
                            if (index === 0) {
                                return <div className={styles.chat_message} key={index}><span className={styles.chat_sender}>{message.sender} says:</span><span className={styles.chat_content} dangerouslySetInnerHTML={{ __html: message.content}} /></div>
                            }
                            if (messages[index-1].sender === message.sender) {
                                return <div className={styles.chat_message} key={index}><span className={styles.chat_content} dangerouslySetInnerHTML={{ __html: message.content}} /></div>
                            }
                            if (messages[index-1].sender !== message.sender) {
                                return <div className={styles.chat_message} key={index}><span className={styles.chat_sender}>{message.sender} says:</span><span className={styles.chat_content} dangerouslySetInnerHTML={{ __html: message.content}} /></div>
                            }
                        })}
                        <div className={styles.chat_messages_end} ref={messagesEndRef} />
                    </div>
                    <div className={styles.actions}>
                        <div className={styles.actions_topbar}>
                            <button className={`${styles.actions_topbar_button} ${emojiWindow ? styles.actions_topbar_button_pressed : ''}`} onFocus={() => emojiWindowOnFocus()} onBlur={() => emojiWindowOnBlur()}>
                                <img className={styles.actions_topbar_emoji} src="/emojis/1.png" />
                                <div className={styles.actions_arrow}></div>
                            </button>
                            <div className={styles.actions_topbar_button}>
                                <img className={styles.actions_topbar_emoji} src="/emojis/3.png" />
                                <div className={styles.actions_arrow}></div>
                            </div>
                            <div className={styles.actions_topbar_button}>
                                <img className={styles.actions_topbar_emoji} src="/emojis/nudge.png" />
                            </div>
                            <div className={styles.actions_topbar_button}>
                                <img className={styles.actions_topbar_emoji} src="/emojis/audio.png" />
                            </div>
                            <div className={`${styles.emoji_window} ${emojiWindow ? styles.emoji_window_open : ''}`}>
                                {emojis.map((emoji, index) => {
                                    return <img className={styles.emoji_window_emoji} key={index} onClick={() => addEmoji(index)} src={`/emojis/${index+1}.png`} />
                                })}
                            </div>
                        </div>
                        <div className={styles.actions_input_container}>
                            <ContentEditable
                                className={styles.actions_input}
                                html={typedText}
                                disabled={false}
                                onChange={typedTextChanged}
                            />
                        </div>
                        <div className={styles.actions_botbar}>
                            <img className={styles.actions_font_icon} src="/icons/font.png" />
                            <button className={styles.actions_send_button} onClick={handleClickSendMessage} disabled={readyState !== ReadyState.OPEN || typedText === ''}>
                                Send
                            </button>
                        </div>
                    </div>
                </div>
            </main>
        </div>
  )
}

export default Home
